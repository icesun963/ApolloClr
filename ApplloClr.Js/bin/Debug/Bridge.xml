<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bridge</name>
    </assembly>
    <members>
        <member name="T:Bridge.GlobalMethodsAttribute">
            <summary>
            This attribute turns methods on a static class as global methods in the generated
            script. Note that the class must be static, and must contain only methods.
            </summary>
        </member>
        <member name="T:Bridge.ReflectableAttribute">
            <summary>
            Can be applied to a member to indicate that metadata for the member should (or should not) be included in the compiled script. By default members are reflectable if they have at least one scriptable attribute. The default reflectability can be changed with the DefaultMemberReflectabilityAttribute.
            </summary>
        </member>
        <member name="T:Bridge.MemberAccessibility">
            <summary>
            This enum defines the possibilities for default member reflectability.
            </summary>
        </member>
        <member name="T:Bridge.ExpandParamsAttribute">
            <summary>
            This attribute can be applied to a method with a "params" parameter to make the param array be expanded in script (eg. given 'void F(int a, params int[] b)', the invocation 'F(1, 2, 3)' will be translated to 'F(1, [2, 3])' without this attribute, but 'F(1, 2, 3)' with this attribute.
            Methods with this attribute can only be invoked in the expanded form.
            </summary>
        </member>
        <member name="T:Bridge.TemplateAttribute">
            <summary>
            TemplateAttribute is instruction to replace method calling (in expression) by required code
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.After">
            <summary>
            Emit this Method body immediately after this class defintion (default)
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Before">
            <summary>
            Emit this Method body Immediately before this class definition
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Top">
            <summary>
            Emit the contents of this Method body directly to the Top of the file.
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Bottom">
            <summary>
            Emit the contents of this Method body directly to the Bottom of the file.
            </summary>
        </member>
        <member name="T:Bridge.ModuleDependencyAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.ModuleAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.DefaultValue">
            <summary>
            Emit default values for all
            </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.Initializer">
            <summary>
            Emit only values that have been explicitly initialized
            </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.Ignore">
            <summary>
            Ignore default value. Emits an empty object literal
            </summary>
        </member>
        <member name="F:Bridge.ObjectCreateMode.Constructor">
            <summary>
            Create instance using constructor
            </summary>
        </member>
        <member name="F:Bridge.ObjectCreateMode.Plain">
            <summary>
            Create instance using plain object ({ } syntax)
            </summary>
        </member>
        <member name="T:Bridge.InlineConstAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.NamespaceAttribute">
            <summary>
            Specifies a custom namespace for the built entity.
            Use 'false' (without quotes) to suppress namespace binding (usually with [External] attribute).
            </summary>
        </member>
        <member name="T:Bridge.NameAttribute">
            <summary>
            Specifies full path name of the entity (namespace+entity), when emitting JavaScript-equivalent
            code. This overrides the inferred namespace.class.method name, for example.
            </summary>
            <remarks>
            Use "Object" (with quotes) to hide its type in JavaScript-level (useful when you create
            a hidden class to fill several public classes' methods).
            </remarks>
        </member>
        <member name="T:Bridge.ExternalAttribute">
            <summary>
            Makes it so the code with this attribute is not built into the assembly files.
            Useful for stubbed out code to match JavaScript.
            </summary>
        </member>
        <member name="T:Bridge.ExternalInterfaceAttribute">
            <summary>
            Applies to interface if it's implementation is done outside Bridge type system (class implementation doesn't provide aliases for interface members implementations)
            </summary>
        </member>
        <member name="T:Bridge.NonScriptableAttribute">
            <summary>
            This attribute can be placed on types in system script assemblies that should not
            be imported. It is only meant to be used within Bridge.dll.
            </summary>
        </member>
        <member name="T:Bridge.FileNameAttribute">
            <summary>
            The file name where JavaScript is generated to.
            </summary>
        </member>
        <member name="T:Bridge.OutputAttribute">
            <summary>
            The output folder path for generated JavaScript. A non-absolute path is concatenated with a project's root.
            Examples: "Bridge/output/", "../Bridge/output/", "c:\\output\\"
            </summary>
        </member>
        <member name="T:Bridge.OutputByAttribute">
            <summary>
            The option to manage JavaScript output folders and files.
            See TypesSplit enum for more details.
            </summary>
        </member>
        <member name="T:Bridge.OutputBy">
            <summary>
            The options to manage JavaScript output folders and files.
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Class">
            <summary>
            The class name will be the file name. If there are classes with same names in different namespaces, the generated JavaScript will be combined into one file. For example, if the class name is "Helpers", the file name will be "Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.ClassPath">
            <summary>
            A folder hierarchy is created using the class name, and a folder is created for each unique word (split by '.') in the class namespace. For example, if the class "Helpers" is within the "Demo" namespace, the file path and name will be "Demo/Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Module">
            <summary>
            The ModuleAttribute value is used as the file name if set on a class. For example, if [Module("MyModuleName")] is set, the file name will be "MyModuleName.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Namespace">
            <summary>
            The full namespace is used as the file name. For example, if "Demo.Utilities" is the namespace, the file name will be "Demo.Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.NamespacePath">
            <summary>
            The class namespace is split (by '.') and a folder is created for each individual value, except the last value which becomes the file name. For example, if "Demo.Utilities" is the namespace, the file path and name will be "/Demo/Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Project">
            <summary>
            All generated JavaScript for the project is added to one [ProjectName].js file. For example, if the project name is "MyUtilities", the file name will be "MyUtilities.js".
            This can be overridden by setting the fileName option within bridge.json, or by using the [FileName] Attribute on the assembly or class levels.
            </summary>
        </member>
        <member name="T:Bridge.ScriptAttribute">
            <summary>
            ScriptAttribute specifies the method implementation that will be output to javascript
            instead of its actual C# implementation. C# implementation is completely discarded if
            this attribute is used.
            </summary>
        </member>
        <member name="T:Bridge.Utils.Console">
            <summary>
            Outputs log messages into a formatted div element on the page
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.ShowTooltip">
            <summary>
            Show tooltip
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.HideTooltip">
            <summary>
             Hide tooltip
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.Close">
            <summary>
            Close Bridge Console
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.WrapBodyContent">
            <summary>
            Wraps all existing child elements inside body into a div
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.UnwrapBodyContent">
            <summary>
            Unwraps content off the bridge body wrapper div back into the body tag as they used to be
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.BuildConsoleMessage(System.String,Bridge.Utils.Console.MessageType)">
            <summary>
            Constructs each message list item
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Utils.Console.SetAttributes(Bridge.Utils.Console.Element,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets multiple attributes
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.Obj2Css(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts Object to CSS styles format
            </summary>
        </member>
        <member name="T:Bridge.Utils.AssemblyVersionMarker">
            <summary>
            The class is to get version string representation either of the current assembly or Compiler
            </summary>
        </member>
        <member name="M:Bridge.Utils.AssemblyVersionMarker.GetVersion(Bridge.Utils.AssemblyVersionMarker.VersionType)">
            <summary>
            Compiler will replace the method call with an version required by method parameter
            </summary>
            <param name="type">Specifies either CurrentAssembly or Compiler version, default is CurrentAssembly</param>
            <returns>Current assembly or Compiler version in string representation</returns>
        </member>
        <member name="T:Bridge.Function">
            <summary>
            Equivalent to the Function type in Javascript.
            </summary>
        </member>
        <member name="M:Bridge.Function.#ctor(System.String[])">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="argNamesAndBody">Argument names, followed by the function body.</param>
        </member>
        <member name="M:Bridge.Function.#ctor(System.String,System.String)">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="parameters">List of comma separated argument names</param>
            <param name="body">The function body</param>
        </member>
        <member name="M:Bridge.Function.#ctor(System.String[],System.String)">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="parameters">Argument names</param>
            <param name="body">The function body</param>
        </member>
        <member name="P:Bridge.Function.Length">
            <summary>
            Gets the number of parameters expected by the function.
            </summary>
        </member>
        <member name="M:Bridge.Function.Apply(System.Object)">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:Bridge.Function.Apply(System.Object,System.Object[])">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <param name="arguments">The set of arguments to pass in into the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:Bridge.Function.Call(System.Object)">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:Bridge.Function.Call(System.Object,System.Object[])">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <param name="arguments">One or more arguments to pass in into the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:Bridge.Script.Write``1(System.String,System.Object[])">
            <summary>
            Inject javascript code
            </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Write(System.String,System.Object[])">
            <summary>
            Inject javascript code
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Bridge.Script.Undefined">
            <summary>
            The global undefined property represents the value undefined.
            </summary>
        </member>
        <member name="F:Bridge.Script.NaN">
            <summary>
            The global NaN property is a value representing Not-A-Number.
            </summary>
        </member>
        <member name="F:Bridge.Script.Infinity">
            <summary>
            The global Infinity property is a numeric value representing infinity.
            </summary>
        </member>
        <member name="M:Bridge.Script.Eval``1(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Eval(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsFinite(System.Object)">
            <summary>
            The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.
            </summary>
            <param name="testValue">The value to be tested for finiteness.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseFloat(System.String)">
            <summary>
            Parses a string argument and returns a floating point number corresponding to double .Net type.
            </summary>
            <param name="value">A string that represents the value you want to parse.</param>
            <returns>Parsed floating point number with type corresponding to double .Net type</returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String,System.Int32)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <param name="radix">An integer that represents the radix of the above mentioned string. Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsNaN(System.Object)">
            <summary>
            The isNaN() function determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in Number.isNaN() as defined in ECMAScript 6 or you can use typeof to determine if the value is Not-A-Number.
            </summary>
            <param name="testValue">The value to be tested.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURI(System.String)">
            <summary>
            The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.
            </summary>
            <param name="encodedURI">A complete, encoded Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURIComponent(System.String)">
            <summary>
            The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.
            </summary>
            <param name="encodedURI">An encoded component of a Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURI(System.String)">
            <summary>
            The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="uri">A complete Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURIComponent(System.String)">
            <summary>
            The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="component">A component of a URI.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.SafeFunc(System.Func{System.Boolean})">
            <summary>
            Runs the function in a try/catch statement
            </summary>
            <param name="fn">Function to run</param>
            <returns>Return either function result or false in case of catch</returns>
        </member>
        <member name="T:Bridge.Arguments">
            <summary>
            Provides access to the arguments of the current function.
            </summary>
        </member>
        <member name="P:Bridge.Arguments.Length">
            <summary>
            Retrieves the number of actual arguments passed to the function.
            </summary>
            <returns>The count of arguments.</returns>
        </member>
        <member name="M:Bridge.Arguments.GetArgument(System.Int32)">
            <summary>
            Retrieves the specified actual argument value passed to the
            function by index.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The value of the specified argument.</returns>
        </member>
        <member name="T:Bridge.Error">
            <summary>
            The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types.
            </summary>
        </member>
        <member name="M:Bridge.Date.#ctor(System.Double)">
            <summary>
            Double value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).
            </summary>
            <param name="value">The numberof milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch)</param>
        </member>
        <member name="M:Bridge.Date.#ctor(System.String)">
            <summary>
            String value representing a date. The string should be in a format recognized by the Date.parse() method (IETF-compliant RFC 2822 timestamps and also a version of ISO8601).
            </summary>
            <param name="dateString"></param>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type type applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes of type type applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined
            by some comparer. It also supports basic set operations such as Union, Intersection,
            Complement and Exclusive Complement.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the ICollection is read-only.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
            <summary>
            Adds an item to the ICollection.
            </summary>
            <param name="item">The object to add to the ICollection</param>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Clear">
            <summary>
            Removes all items from the ICollection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
            <summary>
            Determines whether the ICollection contains a specific value.
            </summary>
            <param name="item">The object to locate in the ICollection.</param>
            <returns>true if item is found in the ICollection; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ICollection.
            </summary>
            <param name="item">The object to remove from the ICollection.</param>
            <returns>true if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the List is read-only.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.IList.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the ReadOnlyCollection is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.ICollection.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsVolatile">
            <summary>
            Should compile, but be ignored as volatile is not relevant in the JavaScript world.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.FriendAccessAllowedAttribute">
            <summary>
                If AllInternalsVisible is not true for a friend assembly, the FriendAccessAllowed attribute
                indicates which internals are shared with that friend assembly.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DummyTypeUsedToAddAttributeToDefaultValueTypeConstructor">
            <summary>
            If a constructor for a value type takes an instance of this type as a parameter, any attribute applied to that constructor will instead be applied to the default (undeclarable) constructor.
            </summary>
        </member>
        <member name="T:System.Guid">
            <summary>
            The Guid data type which is mapped to the string type in Javascript.
            </summary>
        </member>
        <member name="F:System.Guid.Empty">
            <summary>
            A read-only instance of the Guid structure whose value is all zeros.
            </summary>
        </member>
        <member name="M:System.Guid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Guid structure by using the value represented by the specified string.
            </summary>
            <param name="uuid">A string that contains a GUID</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Guid structure by using the specified array of bytes.
            </summary>
            <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Guid structure by using the specified unsigned integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Initializes a new instance of the Guid structure by using the specified integers and byte array.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The remaining 8 bytes of the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Guid structure by using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:System.Guid.Equals(System.Guid)">
            <summary>
            Returns a value indicating whether this instance and a specified Guid object represent the same value.
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <returns>true if o is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Guid.CompareTo(System.Guid)">
            <summary>
            Compares this instance to a specified Guid object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:System.Guid.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns>The value of this Guid, formatted by using the "D" format specifier.</returns>
        </member>
        <member name="M:System.Guid.ToString(System.String)">
            <summary>
            Returns a string representation of the value of this Guid instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P". If format is null or an empty string (""), "D" is used.</param>
            <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        </member>
        <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value of this instance of the Guid class, according to the provided format specifier and culture-specific format information.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P". If format is null or an empty string (""), "D" is used.</param>
            <param name="formatProvider">(Reserved) An object that supplies culture-specific formatting information.</param>
            <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        </member>
        <member name="M:System.Guid.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of this instance.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="M:System.Guid.Parse(System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A structure that contains the value that was parsed.</returns>
        </member>
        <member name="M:System.Guid.ParseExact(System.String,System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure, provided that the string is in the specified format.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting input: "N", "D", "B", "P".</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="result">The structure that will contain the parsed value. If the method returns true, result contains a valid Guid. If the method returns false, result equals Guid.Empty.</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure, provided that the string is in the specified format.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting input: "N", "D", "B", "P".</param>
            <param name="result">The structure that will contain the parsed value. If the method returns true, result contains a valid Guid. If the method returns false, result equals Guid.Empty.</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.NewGuid">
            <summary>
            Initializes a new instance of the Guid structure.
            </summary>
            <returns>A new GUID object.</returns>
        </member>
        <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
            <summary>
            Indicates whether the values of two specified Guid objects are equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if a and b are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
            <summary>
            Indicates whether the values of two specified Guid objects are not equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if a and b are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value, and the specified function is used
            to select the result value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <param name="resultSelector">
            A function to transform the final accumulator value into the result value.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <typeparam name="TResult">
            The type of the resulting value.
            </typeparam>
            <returns>
            The transformed final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            apply the predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if every element of the source sequence passes the test in the specified
            predicate, or if the sequence is empty; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to check for emptiness.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to apply the
            predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if any elements in the source sequence pass the test in the specified
            predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Linq.EnumerableInstance{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate an average.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the elements of an System.Collections.IEnumerable to the specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable that contains the elements to be cast
            to type TResult.
            </param>
            <typeparam name="TResult">
            The type to cast the elements of source to.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains each element of
            the source sequence cast to the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            An element in the sequence cannot be cast to type TResult.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">
            The first sequence to concatenate.
            </param>
            <param name="second">
            The sequence to concatenate to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the concatenated
            elements of the two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by using the default
            equality comparer.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <param name="comparer">
            An equality comparer to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">
            A sequence that contains elements to be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence
            satisfy a condition.
            </summary>
            <param name="source">
            A sequence that contains elements to be tested and counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default
            value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return a default value for if it is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; object that contains the default
            value for the TSource type if source is empty; otherwise, source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in
            a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return the specified value for if it is empty.
            </param>
            <param name="defaultValue">
            The value to return if the sequence is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains defaultValue if
            source is empty; otherwise, source.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0 or greater than or equal to the number of elements in
            source.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value
            if the index is out of range.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the index is outside the bounds of the source sequence;
            otherwise, the element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Empty``1">
            <summary>
            Returns an empty System.Collections.Generic.IEnumerable&lt;T&gt; that has the specified
            type argument.
            </summary>
            <typeparam name="TResult">
            The type to assign to the type parameter of the returned generic System.Collections.Generic.IEnumerable&lt;T&gt;.
            </typeparam>
            <returns>
            An empty System.Collections.Generic.IEnumerable&lt;T&gt; whose type argument is
            TResult.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the specified sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty; otherwise, the first element in source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition or a
            default value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty or if no element passes the test specified
            by predicate; otherwise, the first element in source that passes the test
            specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a sequence of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and projects the elements for each group by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and compares the keys by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The keys are compared
            by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The elements of each
            group are projected by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The
            keys are compared by using a comparer and each group's elements are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. Key values are compared
            by using a specified comparer, and the elements of each group are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Correlates the elements of two sequences based on equality of keys and groups
            the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups
            the results. A specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default
            equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt; is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an System.Int64 that represents the total number of elements in a
            sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an System.Int64 that represents how many elements in a sequence satisfy
            a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of matching elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value at the last position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The last element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the source sequence is empty; otherwise, the last element
            in the System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a condition or a default
            value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the sequence is empty or if no elements pass the test
            in the predicate function; otherwise, the last element that passes the test
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int327gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum TSource value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum TResult value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the elements of an System.Collections.IEnumerable based on a specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable whose elements to filter.
            </param>
            <typeparam name="TResult">
            The type to filter the elements of the sequence on.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence of type TResult.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">
            The value of the first integer in the sequence.
            </param>
            <param name="count">
            The number of sequential integers to generate.
            </param>
            <returns>
            An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that
            contains a range of sequential integral numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.-or-start + count -1 is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
            <param name="element">
            The value to be repeated.
            </param>
            <param name="count">
            The number of times to repeat the value in the generated sequence.
            </param>
            <typeparam name="TResult">
            The type of the value to be repeated in the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains a repeated value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">
            A sequence of values to reverse.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A sequence whose elements correspond to those of the input sequence in reverse
            order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the
            element's index.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;
            and flattens the resulting sequences into one sequence.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            and flattens the resulting sequences into one sequence. The index of each
            source element is used in the projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of an input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each element of the input sequence.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein. The index of each source element
            is used in the intermediate projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using
            the default equality comparer for their type.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by
            using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to use to compare elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements compare equal according to comparer; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.-or-The input sequence
            is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies a condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-More than one element
            satisfies the condition in predicate.-or-The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence
            is empty; this method throws an exception if there is more than one element
            in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence, or default(TSource) if the sequence
            contains no elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition
            or a default value if no such element exists; this method throws an exception
            if more than one element satisfies the condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies the condition, or
            default(TSource) if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the
            remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="count">
            The number of elements to skip before returning the remaining elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements that
            occur after the specified index in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements. The element's index is used in the
            logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of the sequence of nullable System.Decimal values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the sum of the sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the sum of the sequence of nullable System.Double values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the sum of the sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the sum of the sequence of nullable System.Single values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the sum of the sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the sum of the sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the sum of the sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="count">
            The number of elements to return.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified
            number of elements from the start of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">
            A sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order, according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from a System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create an array from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An array that contains the elements from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer, and an element
            selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a System.Collections.Generic.List&lt;T&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.List&lt;T&gt;
            from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A System.Collections.Generic.List&lt;T&gt; that contains elements from the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer and an element
            selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <param name="comparer">
            The System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's index is
            used in the logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <param name="first">
            The first sequence to merge.
            </param>
            <param name="second">
            The second sequence to merge.
            </param>
            <param name="resultSelector">
            A function that specifies how to merge the elements from the two sequences.
            </param>
            <typeparam name="TFirst">
            The type of the elements of the first input sequence.
            </typeparam>
            <typeparam name="TSecond">
            The type of the elements of the second input sequence.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains merged elements
            of two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="T:System.Random">
            <summary>
            A random number generator
            </summary>
        </member>
        <member name="M:System.Random.#ctor">
            <summary>
            Initializes a new instance of the Random class, using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:System.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Random class, using the specified seed value.
            </summary>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
        </member>
        <member name="M:System.Random.Sample">
            <summary>
            Returns a random floating-point number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:System.Random.Next">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:System.Random.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:System.Random.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than maxValue; that is, the range of return values ordinarily includes 0 but not maxValue. However, if maxValue equals 0, maxValue is returned.</returns>
        </member>
        <member name="M:System.Random.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:System.Random.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="P:System.ArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
        </member>
        <member name="T:System.Console">
            <summary>
            Represents the standard input, output, and error streams for console applications.
            </summary>
        </member>
        <member name="M:System.Console.ReadLine">
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.ReadLine(System.String)">
            <summary>
            ReadLine uses the native JavaScript prompt() to display a dialog with an optional message prompting the user to input some text.
            </summary>
            <param name="text">text is a string of text to display to the user. This parameter is optional and can be omitted if there is nothing to show in the prompt window.</param>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.ReadLine(System.String,System.String)">
            <summary>
            ReadLine uses the native JavaScript prompt() to dialog with an optional message prompting the user to input some text.
            </summary>
            <param name="text">text is a string of text to display to the user. This parameter is optional and can be omitted if there is nothing to show in the prompt window.</param>
            <param name="value">value is a string containing the default value displayed in the text input field. It is an optional parameter. Note that in Internet Explorer 7 and 8, if you do not provide this parameter, the string "undefined" is the default value.</param>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.Read">
            <summary>
            Read uses the native JavaScript prompt() to display a dialog with an optional message prompting the user to input some text.
            </summary>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.Write(System.Boolean)">
            <summary>
            Writes the text representation of the specified Boolean value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Char)">
            <summary>
            Writes the specified Unicode character value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Decimal)">
            <summary>
            Writes the text representation of the specified Decimal value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Double)">
            <summary>
            Writes the text representation of the specified double-precision floating-point value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Int32)">
            <summary>
            Writes the text representation of the specified 32-bit signed integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Int64)">
            <summary>
            Writes the text representation of the specified 64-bit signed integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Object)">
            <summary>
            Writes the text representation of the specified object to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Single)">
            <summary>
            Writes the text representation of the specified single-precision floating-point value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.String)">
            <summary>
            Writes the specified string value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified object to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
            <param name="arg3">The fourth object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.UInt32)">
            <summary>
            Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.UInt64)">
            <summary>
            Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Char[])">
            <summary>
            Writes the specified array of Unicode characters to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
        </member>
        <member name="M:System.Console.WriteLine">
            <summary>
            Writes the current line terminator to the standard output stream.
            </summary>
        </member>
        <member name="M:System.Console.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Char)">
            <summary>
            Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Decimal)">
            <summary>
            Writes the text representation of the specified Decimal value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Double)">
            <summary>
            Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Object)">
            <summary>
            Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Single)">
            <summary>
            Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
            <param name="arg3">The fourth object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.UInt64)">
            <summary>
            Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Char[])">
            <summary>
            Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Enum)">
            <summary>
            Writes the text representation of the specified enum value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Nullable{System.Decimal})">
            <summary>
            Writes the text representation of the specified nullable decimal, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Nullable{System.Int64})">
            <summary>
            Writes the text representation of the specified nullable 64-bit signed integer, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Nullable{System.UInt64})">
            <summary>
            Writes the text representation of the specified nullable 64-bit unsigned integer, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Clear">
            <summary>
            Clears the console buffer and corresponding console window of display information.
            </summary>
        </member>
        <member name="T:System.ArraySegment`1">
            <summary>
            Delimits a section of a one-dimensional array.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Array">
            <summary>
            Gets the original array containing the range of elements that the array segment delimits.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Count">
            <summary>
            Gets the number of elements in the range delimited by the array segment.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Offset">
            <summary>
            Gets the position of the first element in the range delimited by the array segment,
            relative to the start of the original array.
            </summary>
        </member>
        <member name="T:System.Base64FormattingOptions">
            <summary>
            Specifies whether relevant "Convert.ToBase64CharArray" and "Convert.ToBase64String" methods insert line breaks in their output.
            </summary>
        </member>
        <member name="T:System.Converter`2">
            <summary>
            Represents a method that converts an object from one type to another type.
            </summary>
            <typeparam name="TInput">The type of object that is to be converted.</typeparam>
            <typeparam name="TOutput">The type the input object is to be converted to.</typeparam>
            <param name="input">The object to convert.</param>
            <returns>The TOutput that represents the converted TInput.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
            <summary>
            Represents the result (a.k.a. return value) of a method or property.
            </summary>
            <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
            <returns>Return value of the enclosing method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
            <summary>
            Represents the final (output) value of an out parameter when returning from a method.
            </summary>
            <typeparam name="T">Type of the out parameter.</typeparam>
            <param name="value">The out parameter.</param>
            <returns>The output value of the out parameter.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
            <summary>
            Represents the value of <paramref name="value"/> as it was at the start of the method or property.
            </summary>
            <typeparam name="T">Type of <paramref name="value"/>.  This can be inferred.</typeparam>
            <param name="value">Value to represent.  This must be a field or parameter.</param>
            <returns>Value of <paramref name="value"/> at the start of the method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for all integers starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for all integers
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for all elements in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for all elements in
            <paramref name="collection"/>.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for any integer starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for any integer
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for any element in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for an element in
            <paramref name="collection"/>.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
            <summary>
            Marker to indicate the end of the contract section of a method.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
            <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
            <summary>
            Types marked with this attribute specify that a separate type contains the contracts for this type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
            <summary>
            Types marked with this attribute specify that they are a contract for the type that is the argument of the constructor.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
            <summary>
            This attribute is used to mark a method as being the invariant
            method for a class. The method can have any name, but it must
            return "void" and take no parameters. The body of the method
            must consist solely of one or more calls to the method
            Contract.Invariant. A suggested name for the method is
            "ObjectInvariant".
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
            <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
            <summary>
            Allows a field f to be used in the method contracts for a method m when f has less visibility than m.
            For instance, if the method is public, but the field is private.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
            <summary>
            Attribute that specifies that an assembly is a reference assembly with contracts.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
            <summary>
            Methods (and properties) marked with this attribute can be used within calls to Contract methods, but have no runtime behavior associated with them.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
            <summary>
            Instructs downstream tools whether to assume the correctness of this assembly, type or member without performing any verification or not.
            Can use [ContractVerification(false)] to explicitly mark assembly, type or member as one to *not* have verification performed on it.
            Most specific element found (member, type, then assembly) takes precedence.
            (That is useful if downstream tools allow a user to decide which polarity is the default, unmarked case.)
            </summary>
            <remarks>
            Apply this attribute to a type to apply to all members of the type, including nested types.
            Apply this attribute to an assembly to apply to all types and members of the assembly.
            Apply this attribute to a property to apply to both the getter and setter.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>
            Methods and classes marked with this attribute can be used within calls to Contract methods. Such methods not make any visible state changes.
            </summary>
        </member>
        <member name="M:System.Convert.ToBoolean(System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent Boolean value.
            Note: Calling this method for <see cref="T:System.Char"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.Char"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Object)">
            <summary>
            Converts the value of the specified object to a Unicode character.
            Note: Calling this method for <see cref="T:System.Boolean"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.Boolean"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Boolean)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Char)">
            <summary>
            Returns the specified Unicode character value; no actual conversion is performed.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.String)">
            <summary>
            Converts the value of the specified object to a Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Single)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Double)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Decimal)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.DateTime)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.Object)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.Object)">
            <summary>
            Converts the value of the specified object to an 8-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.Object)">
            <summary>
            Converts the value of the specified object to a 16-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.Object)">
            <summary>
            Converts the value of the specified object to a 16-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.Object)">
            <summary>
            Converts the value of the specified object to a 32-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.Object)">
            <summary>
            Converts the value of the specified object to a 32-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.Object)">
            <summary>
            Converts the value of the specified object to a 64-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.Object)">
            <summary>
            Converts the value of the specified object to a 64-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSingle(System.Object)">
            <summary>
            Converts the value of the specified object to a single-precision floating-point number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDouble(System.Object)">
            <summary>
            Converts the value of the specified object to a double-precision floating-point number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDecimal(System.Object)">
            <summary>
            Converts the value of the specified object to an equivalent decimal number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDateTime(System.Object)">
            <summary>
            Converts the value of the specified object to a <see cref="T:System.DateTime"/> object.
            Note: Calling this method for built-in types (except <see cref="T:System.DateTime"/>, <see cref="T:System.String"/>) always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a <see cref="T:System.DateTime"/> object, using the specified culture-specific formatting information.
            Note: Calling this method for built-in types (except <see cref="T:System.DateTime"/>, <see cref="T:System.String"/>) always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Object)">
            <summary>
            Converts the value of the specified object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Char)">
            <summary>
            Converts the value of the specified object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
            <summary>
            Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
            <summary>
            Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
            <summary>
            Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
            <summary>
            Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers. </param><param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"/> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None"/> to not insert line breaks.</param><exception cref="T:System.ArgumentNullException"><paramref name="inArray"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> is not a valid <see cref="T:System.Base64FormattingOptions"/> value. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
             <summary>
             Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.
             </summary>
            
             <returns>
             A 32-bit signed integer containing the number of bytes in <paramref name="outArray"/>.
             </returns>
        </member>
        <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
             <summary>
             Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.
             </summary>
            
             <returns>
             A 32-bit signed integer containing the number of bytes in <paramref name="outArray"/>.
             </returns>
        </member>
        <member name="M:System.Convert.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
        </member>
        <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.
            </summary>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            System.EventArgs is the base class for classes containing event data.
            </summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary>
            Initializes a new instance of the System.EventArgs class.
            </summary>
        </member>
        <member name="T:System.EventHandler">
            <summary>
            Represents the method that will handle an event that has no event data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains no event data.</param>
        </member>
        <member name="T:System.EventHandler`1">
            <summary>
            Represents the method that will handle an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="T:System.Net.WebSockets.ClientWebSocket">
            <summary>
            Provides a client for connecting to WebSocket services.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.State">
            <summary>
            Get the WebSocket state of the <see cref="T:System.Net.WebSockets.ClientWebSocket"/> instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.Options">
            <summary>
            Gets the WebSocket options for the ClientWebSocket instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
            <summary>
            Gets the reason why the close handshake was initiated on ClientWebSocket instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
            <summary>
            Returns the optional description that describes why the close handshake
            has been initiated by the remote endpoint.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
            <summary>
            Gets the supported WebSocket sub-protocol for the ClientWebSocket instance.
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Connect to a WebSocket server as an asynchronous operation.
            </summary>
            <param name="uri">The URI of the WebSocket server to connect to.</param>
            <param name="cancellationToken">IGNORED: Connection can't be interrupted in Javascript.</param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send data on ClientWebSocket. Though this method has Async suffix, returned Task will
            always be completed(i.e. you can't track sending progress), due to Javascript limitations.
            </summary>
            <param name="buffer">The buffer containing the message to be sent.</param>
            <param name="messageType">Specifies whether the buffer is clear text or in a binary format.</param>
            <param name="endOfMessage">IGNORED: You can't define end of WebSocket message in Javascript.</param>
            <param name="cancellationToken">IGNORED: Send can't be interrupted in Javascript.</param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the ClientWebSocket instance as an asynchronous operation.
            </summary>
            <param name="closeStatus">The WebSocket close status.</param>
            <param name="statusDescription">A description of the close status.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this operation should be canceled.
            Only useful if you don't want to wait for closing response, as closing can't be interrupted once initiated.
            </param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the ClientWebSocket instance. Though this method has Async suffix, returned Task will
            always be completed(i.e. you can't track sending progress), due to Javascript limitations.
            </summary>
            <param name="closeStatus">The WebSocket close status.</param>
            <param name="statusDescription">A description of the close status.</param>
            <param name="cancellationToken">IGNORED: Close can't be interrupted in Javascript. </param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.Abort">
            <summary>
            Aborts the connection and cancels any pending IO operations.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.ClientWebSocketOptions">
            <summary>
            Options to use with a <see cref="T:System.Net.WebSockets.ClientWebSocket"/> object.
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocketOptions.AddSubProtocol(System.String)">
            <summary>
            Adds a sub-protocol to be negotiated during the WebSocket connection handshake.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
            <summary>
            Represents well known WebSocket close codes as defined in section 11.7 of the WebSocket protocol spec.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
            <summary>
            An instance of this class represents the result of performing a single ReceiveAsync operation on a WebSocket.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
            <summary>
            Indicates the number of bytes that the WebSocket received.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
            <summary>
            Indicates whether the message has been received completely.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
            <summary>
            Indicates whether the current message is a UTF-8 message or a binary message.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
            <summary>
            Indicates the reason why the remote endpoint initiated the close handshake.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
            <summary>
            Returns the optional description that describes why the close handshake has been initiated by the remote endpoint.
            </summary>
        </member>
        <member name="T:System.Predicate`1">
            <summary>
            Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.
            </summary>
            <returns>
            true if <paramref name="obj"/> meets the criteria defined within the method represented by this delegate; otherwise, false.
            </returns>
            <param name="obj">The object to compare against the criteria defined within the method represented by this delegate.</param><typeparam name="T">The type of the object to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.MidpointRounding">
            <summary>
            Specifies how mathematical rounding methods should process a number that is midway between two numbers.
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Up">
            <summary>
            Rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Down">
            <summary>
            Rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityPos">
            <summary>
            Rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityNeg">
            <summary>
            Rounds towards -Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.AwayFromZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.TowardsZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.ToEven">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Ceil">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Floor">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity
            </summary>
        </member>
        <member name="P:System.Reflection.Assembly.FullName">
            <summary>
            Gets the display name of the assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
            <summary>
            Creates the name of a type qualified by the display name of its assembly.
            </summary>
            <param name="assemblyName">The display name of an assembly.</param>
            <param name="typeName">The full name of a type.</param>
            <returns>The full name of the type qualified by the display name of the assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
            <summary>
            Gets the currently loaded assembly in which the specified type is defined.
            </summary>
            <param name="type">An object representing a type in the assembly that will be returned.</param>
            <returns>The assembly in which the specified type is defined.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.Load(System.String)">
            <summary>
            Loads an assembly given the long form of its name.
            </summary>
            <param name="assemblyString">The long form of the assembly name.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String)">
            <summary>
            Gets the Type object with the specified name in the assembly instance.
            </summary>
            <param name="name">The full name of the type.</param>
            <returns>An object that represents the specified class, or null if the class is not found.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            <returns>An array that contains all the types that are defined in this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.
            </summary>
            <param name="typeName">The Type.FullName of the type to locate.</param>
            <returns>An instance of the specified type created with the default constructor; or null if typeName is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with BindingFlags set to Public or Instance.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
            <summary>
            Gets the assembly that contains the code that is currently executing.
            </summary>
            <returns>The assembly that contains the code that is currently executing.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified assembly.
            </summary>
            <returns>A collection of the custom attributes that are applied to element, or an empty collection if no such attributes exist.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A collection of the custom attributes that are applied to element and that match attributeType, or an empty collection if no such attributes exist.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
            <summary>
            Gets all the custom attributes for this assembly.
            </summary>
            <param name="inherit">This argument is ignored for objects of type Assembly.</param>
            <returns>An array that contains the custom attributes for this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for this assembly as specified by type.
            </summary>
            <param name="attributeType">The type for which the custom attributes are to be returned.</param>
            <param name="inherit">This argument is ignored for objects of type Assembly.</param>
            <returns>An array that contains the custom attributes for this assembly as specified by attributeType.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
            <summary>
            Returns the names of all the resources in this assembly.
            </summary>
            <returns>An array that contains the names of all the resources.</returns>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.ScriptName">
            <summary>
            Script name of the constructor. Null for the unnamed constructor and for constructors with special implementations
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsStaticMethod">
            <summary>
            True if the constructor is a normal method that returns the created instance and should be invoked without the 'new' operator
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.SpecialImplementation">
            <summary>
            For constructors with a special implementation (eg. [Template]), contains a delegate that can be invoked to create an instance.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the constructor.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldInfo.ScriptName">
            <summary>
            Script name of the field
            </summary>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="T:System.Reflection.MemberTypes">
            <summary>
            Marks each type of member that is defined as a derived class of MemberInfo.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.ScriptName">
            <summary>
            Script name of the method. Null if the method has a special implementation.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.SpecialImplementation">
            <summary>
            For methods with a special implementation (eg. [Template]), contains a delegate that represents the method. Null for normal methods.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the method.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
            <summary>
            Returns an array of Type objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
            </summary>
            <returns>An array of Type objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.ScriptFieldName">
            <summary>
            For properties implemented as fields, contains the name of the field. Null for properties implemented as get and set methods.
            </summary>
        </member>
        <member name="T:System.StringComparison">
            <summary>
            Specifies the culture, case, and sort rules to be used by certain overloads of the String.Compare and String.Equals methods.
            </summary>
        </member>
        <member name="P:System.Type.BaseType">
            <summary>
            Gets the type from which the current Type directly inherits.
            </summary>
        </member>
        <member name="P:System.Type.IsGenericType">
            <summary>
            Gets a value indicating whether the current type is a generic type.
            </summary>
        </member>
        <member name="P:System.Type.IsAbstract">
            <summary>
            Gets a value indicating whether the Type is abstract and must be overridden.
            </summary>
        </member>
        <member name="P:System.Type.IsSealed">
            <summary>
            Gets a value indicating whether the Type is declared sealed.
            </summary>
        </member>
        <member name="P:System.Type.DeclaringType">
            <summary>
            Gets the type that declares the current nested type or generic type parameter.
            </summary>
        </member>
        <member name="P:System.Type.IsNested">
            <summary>
            Gets a value indicating whether the current Type object represents a type whose definition is nested inside the definition of another type.
            </summary>
        </member>
        <member name="P:System.Type.Attributes">
            <summary>
            Gets the attributes associated with the Type.
            </summary>
        </member>
        <member name="P:System.Type.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the current Type object has type parameters that have not been replaced by specific types.
            </summary>
        </member>
        <member name="P:System.Type.IsGenericParameter">
            <summary>
            Gets a value indicating whether the current Type represents a type parameter in the definition of a generic type or method.
            </summary>
        </member>
        <member name="M:System.Type.GetGenericArguments">
            <summary>
            Returns an array of Type objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.
            </summary>
            <returns>An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="M:System.Type.GetElementType">
            <summary>
            When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <returns>The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="P:System.Type.HasElementType">
            <summary>
            Gets a value indicating whether the current Type encompasses or refers to another type; that is, whether the current Type is an array, a pointer, or is passed by reference.
            </summary>
        </member>
        <member name="M:System.Type.MakeArrayType">
            <summary>
            Returns a Type object representing a one-dimensional array of the current type, with a lower bound of zero.
            </summary>
            <returns>A Type object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
        </member>
        <member name="M:System.Type.MakeArrayType(System.Int32)">
            <summary>
            Returns a Type object representing an array of the current type, with the specified number of dimensions.
            </summary>
            <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
            <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
        </member>
        <member name="M:System.Type.GetEnumNames">
            <summary>
            Returns the names of the members of the current enumeration type.
            </summary>
            <returns>An array that contains the names of the members of the enumeration.</returns>
        </member>
        <member name="M:System.Type.GetEnumName(System.Object)">
            <summary>
            Returns the name of the constant that has the specified value, for the current enumeration type.
            </summary>
            <param name="value">The value whose name is to be retrieved.</param>
            <returns>The name of the member of the current enumeration type that has the specified value, or null if no such constant is found.</returns>
        </member>
        <member name="M:System.Type.GetEnumValues">
            <summary>
            Returns an array of the values of the constants in the current enumeration type.
            </summary>
            <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
        </member>
        <member name="M:System.Type.GetEnumUnderlyingType">
            <summary>
            Returns the underlying type of the current enumeration type.
            </summary>
            <returns>The underlying type of the current enumeration.</returns>
        </member>
        <member name="P:System.Type.IsPublic">
            <summary>
            Gets a value indicating whether the Type is declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNotPublic">
            <summary>
            Gets a value indicating whether the Type is not declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedPublic">
            <summary>
            Gets a value indicating whether a class is nested and declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedPrivate">
            <summary>
            Gets a value indicating whether the Type is nested and declared private.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedFamily">
            <summary>
            Gets a value indicating whether the Type is nested and visible only within its own family.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedAssembly">
            <summary>
            Gets a value indicating whether the Type is nested and visible only within its own assembly.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Capture">
            <summary>
            Represents the results from a single successful subexpression capture.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Index">
            <summary>
            The position in the original string where the first character of the captured substring is found.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Length">
            <summary>
            Gets the length of the captured substring.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Value">
            <summary>
            Gets the captured substring from the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Capture.ToString">
            <summary>
            Retrieves the captured substring from the input string by calling the Value property. (Overrides Object.ToString().)
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CaptureCollection">
            <summary>
            Represents the set of captures made by a single capturing group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
            <summary>
            Gets the number of substrings captured by the group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
            <summary>
            Gets an individual member of the collection.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array beginning at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Group">
            <summary>
            Represents the results from a single capturing group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Group.Success">
            <summary>
            Gets a value indicating whether the match is successful.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Group.Captures">
            <summary>
            Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order
            (or innermost-rightmost-first order if the regular expression is modified with the RegexOptions.RightToLeft option).
            The collection may have zero or more items.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
            <summary>
            Returns a Group object equivalent to the one supplied that is safe to share between multiple threads.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GroupCollection">
            <summary>
            Returns the set of captured groups in a single match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the GroupCollection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the GroupCollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
            <summary>
            Returns the number of groups in the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
            <summary>
            Enables access to a member of the collection by integer index.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
            <summary>
            Enables access to a member of the collection by string index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array beginning at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Match">
            <summary>
            Represents the results from a single regular expression match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Empty">
            <summary>
            Gets the empty group. All failed matches return this empty match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Groups">
            <summary>
            Gets a collection of groups matched by the regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.NextMatch">
            <summary>
            Returns a new Match object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
            <summary>
            Returns the expansion of the specified replacement pattern.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
            <summary>
            Returns a Match instance equivalent to the one supplied that is suitable to share between multiple threads.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchCollection">
            <summary>
            Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
            <summary>
            Gets the number of matches.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
            <summary>
            Gets an individual member of the collection.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array starting at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
            <summary>
            Gets the time-out interval of the current instance.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.Options">
            <summary>
            Gets the options that were passed into the Regex constructor.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
            <summary>
            Gets a value that indicates whether the regular expression searches from right to left.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
            <summary>
            Returns an array of capturing group names for the regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
            <summary>
            Returns an array of capturing group numbers that correspond to group names in an array.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
            <summary>
            Gets the group name that corresponds to the specified group number.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
            <summary>
            Returns the group number that corresponds to the specified group name.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in the specified input string, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular expression specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
            <summary>
            In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
            <summary>
            In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
            <summary>
            In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
            <summary>
            Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the Regex constructor. The search for the regular expression pattern starts at a specified character position in the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
            <summary>
            Determines whether the specified object is equal to the current object.(Inherited from Object.)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
            <summary>
            Converts any escaped characters in the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a regular expression pattern.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchEvaluator">
            <summary>
            Represents the method that is called each time a regular expression match is found during a Replace method operation.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexOptions">
            <summary>
            Provides enumerated values to use to set regular expression options.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.None">
            <summary>
            Specifies that no options are set. For more information about the default behavior of the regular expression engine, see the "Default Options" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
            <summary>
            Specifies case-insensitive matching. For more information, see the "Case-Insensitive Matching " section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
            <summary>
            Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. For more information, see the "Multiline Mode" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
            <summary>
            Specifies that the only valid captures are explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…). For more information, see the "Explicit Captures Only" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
            <summary>
            Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n). For more information, see the "Single-line Mode" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
            <summary>
            Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in , numeric , or tokens that mark the beginning of individual . For more information, see the "Ignore White Space" section of the Regular Expression Options topic.
            </summary>
        </member>
        <member name="P:System.Text.StringBuilder.Length">
            <summary>
            Gets or sets the length of the current StringBuilder object.
            </summary>
        </member>
        <member name="F:System.Threading.Timeout.Infinite">
            <summary>
            A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter.
            </summary>
        </member>
        <member name="T:System.Threading.TimerCallback">
            <summary>
            Represents the method that handles calls from a Timer.
            </summary>
            <param name="state">An object containing application-specific information relevant to the method invoked by this delegate, or null.</param>
            <remarks>
            Use a TimerCallback delegate to specify the method that is called by a Timer.
            This method does not execute in the thread that created the timer;
            it executes in a separate thread pool thread that is provided by the system.
            The TimerCallback delegate invokes the method once after the start time elapses,
            and continues to invoke it once per timer interval until the Dispose method is called,
            or until the Timer.Change method is called with the interval value Infinite.
            The timer delegate is specified when the timer is constructed, and cannot be changed.
            The start time for a Timer is passed in the dueTime parameter of the Timer constructors, and the period is passed in the period parameter.
            For an example that demonstrates creating and using a TimerCallback delegate, see System.Threading.Timer.
            </remarks>
        </member>
        <member name="T:System.Threading.Timer">
            <summary>
            Provides a mechanism for executing a method at specified intervals. This class cannot be inherited.
            </summary>
            <remarks>
            <example>
            <code>
            TimerCallback callback = (o) => { Html5.Window.Alert(o.ToString()); };
            var timer = new Timer(callback, "SomeState", 500, 500);
            await Task.Delay(200); // It allows the timer to work
            timer.Change(-1, 200); // Stops the timer
            timer.Dispose() // Stops the timer "forever"
            </code>
            Timer implemented based on setTimeout() see https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout#Notes.
            It's important to note that the function or code snippet cannot be executed until the thread that called setTimeout() has terminated.
            The delegate specified by the callback parameter is invoked once after dueTime elapses,
            and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately. If dueTime is Timeout.Infinite, callback is not invoked;
            the timer is disabled, but can be re-enabled by calling the Change method.
            Successive setTimeout() calls with delay smaller than the "minimum delay" limit are forced to use at least the minimum delay.
            The minimum delay, DOM_MIN_TIMEOUT_VALUE, is 4 ms (stored in a preference in Firefox: dom.min_timeout_value),
            with a DOM_CLAMP_TIMEOUT_NESTING_LEVEL of 5.
            If period is zero (0) or Timeout.Infinite and dueTime is not Timeout.Infinite, callback is invoked once;
            the periodic behavior of the timer is disabled, but can be re-enabled using the Change method.
            </example>
            </remarks>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the Timer class, using TimeSpan values to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is negative one (-1) milliseconds, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Timer class, using 32-bit unsigned integers to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the Timer class, using 64-bit signed integers to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
            <summary>
            Initializes a new instance of the Timer class with an infinite period and an infinite due time, using the newly created Timer object as the state object.
            Call this constructor when you want to use the Timer object itself as the state object. After creating the timer, use the Change method to set the interval and due time.
            This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the Timer object is assigned to the state object.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
        </member>
        <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="dueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Dispose">
            <summary>
            Releases all resources used by the current instance of Timer.
            Callbacks will not be called after Timer is disposed
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            Implemented as a loop checking timeout each iteration.
            Please note maximum 1e7 iterations
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is suspended. Should be positive or -1. -1 works the same as 0 (not Infinite)</param>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread for the specified anout of time.
            Implemented as a loop checking timeout each iteration.
            Please note maximum 1e7 iterations
            </summary>
            <param name="timeout">The amount of time for which the thread is suspended. Should be positive or -1. -1 works the same as 0 (not Infinite)</param>
        </member>
        <member name="T:System.Threading.Tasks.IPromise">
            <summary>
            CommonJS Promise/A interface
            http://wiki.commonjs.org/wiki/Promises/A
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.IPromise.Then(System.Delegate,System.Delegate,System.Delegate)">
            <summary>
            Adds a fulfilledHandler, errorHandler to be called for completion of a promise.
            </summary>
            <param name="fulfilledHandler">The fulfilledHandler is called when the promise is fulfilled</param>
            <param name="errorHandler">The errorHandler is called when a promise fails.</param>
            <param name="progressHandler"></param>
        </member>
        <member name="T:System.Threading.Tasks.PromiseExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Threading.Tasks.PromiseExtensions.GetAwaiter(System.Threading.Tasks.IPromise)">
             <summary>
            
             </summary>
             <param name="promise"></param>
             <returns></returns>
        </member>
        <member name="T:System.Threading.Tasks.PromiseException">
            <summary>
            This exception is used as the exception for a task created from a promise when the underlying promise fails.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.PromiseException.Arguments">
            <summary>
            Arguments supplied to the promise onError() callback.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary>
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary>
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for
            attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken
            while the token was in signaled state, or the task's CancellationToken was already signaled before the
            task started executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:System.Uri">
            <summary>
            Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:System.Array.IndexOf(System.String)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.IndexOf(System.String,System.Int32)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String,System.Int32)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
            <summary>
            Creates a one-dimensional Array of the specified Type and length, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length">The size of the Array to create.</param>
            <returns>A new one-dimensional Array of the specified Type with the specified length, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a two-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length1">The size of the first dimension of the Array to create.</param>
            <param name="length2">The size of the second dimension of the Array to create.</param>
            <returns>A new two-dimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a three-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length1">The size of the first dimension of the Array to create.</param>
            <param name="length2">The size of the second dimension of the Array to create.</param>
            <param name="length3">The size of the third dimension of the Array to create.</param>
            <returns>A new three-dimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
            <summary>
            Creates a multidimensional Array of the specified Type and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the Array to create.</param>
            <returns>A new multidimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the DateTime structure to a specified number of ticks.
            </summary>
            <param name="value">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.String)">
            <summary>
            String value representing a date. The string should be in a format recognized by the Date.parse() method (IETF-compliant RFC 2822 timestamps and also a version of ISO8601).
            </summary>
            <param name="dateString"></param>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Sunday">
            <summary>
            Indicates Sunday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Monday">
            <summary>
            Indicates Monday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Tuesday">
            <summary>
            Indicates Tuesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Wednesday">
            <summary>
            Indicates Wednesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Thursday">
            <summary>
            Indicates Thursday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Friday">
            <summary>
            Indicates Friday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Saturday">
            <summary>
            Indicates Saturday.
            </summary>
        </member>
        <member name="T:System.Decimal">
            <summary>
            The decimal data type.
            http://mikemcl.github.io/decimal.js/
            </summary>
        </member>
        <member name="M:System.Decimal.Random(System.Int32)">
            <summary>
            Returns a new Decimal with a pseudo-random value equal to or greater than 0 and less than 1.
            </summary>
            <param name="dp">The return value will have dp decimal places (or less if trailing zeros are produced). If dp is omitted then the number of decimal places will default to the current precision setting.</param>
            <returns></returns>
        </member>
        <member name="M:System.Decimal.SetConfig(System.DecimalConfig)">
            <summary>
            Configures the 'global' settings for this particular Decimal constructor.
            </summary>
            <param name="config"></param>
        </member>
        <member name="F:System.DecimalConfig.Precision">
            <summary>
            Default value: 20
            The maximum number of significant digits of the result of a calculation or base conversion.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Rounding">
            <summary>
            The default rounding mode used when rounding the result of a calculation or base conversion to precision significant digits, and when rounding the return value of the round, toDecimalPlaces, toExponential, toFixed, toFormat, toNearest, toPrecision and toSignificantDigits methods.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpNeg">
            <summary>
            The negative exponent value at and below which toString returns exponential notation. Default value: -7
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpPos">
            <summary>
            The positive exponent value at and above which toString returns exponential notation. Default value: 20
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MinE">
            <summary>
            The negative exponent limit, i.e. the exponent value below which underflow to zero occurs. Default value: -9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MaxE">
            <summary>
            The positive exponent limit, i.e. the exponent value above which overflow to Infinity occurs. Default value: 9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Errors">
            <summary>
            The value that determines whether Decimal Errors are thrown. If errors is false, this library will not throw errors.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Crypto">
            <summary>
            The value that determines whether cryptographically-secure pseudo-random number generation is used. Default value: false
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Modulo">
            <summary>
            The modulo mode used when calculating the modulus: a mod n.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Format">
            <summary>
            The format object configures the format of the string returned by the toFormat method.
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.DecimalSeparator">
            <summary>
            the decimal separator
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSeparator">
            <summary>
            the grouping separator of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSize">
            <summary>
            the primary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.SecondaryGroupSize">
            <summary>
            the secondary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSeparator">
            <summary>
            the grouping separator of the fraction part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSize">
            <summary>
            the grouping size of the fraction part of the number
            </summary>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>
            This attribute marks a field, property, event or method as
            "browsable", i.e. present in the type descriptor associated with
            the type.
            </summary>
        </member>
        <member name="T:System.LocaleOptions">
            <summary>
            An object with some or all of the following properties:
            </summary>
        </member>
        <member name="F:System.LocaleOptions.LocaleMatcher">
            <summary>
            The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". For information about this option, see the Intl page.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Usage">
            <summary>
            Whether the comparison is for sorting or for searching for matching strings. Possible values are "sort" and "search"; the default is "sort".
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Sensitivity">
            <summary>
            Which differences in the strings should lead to non-zero result values.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.IgnorePunctuation">
            <summary>
            Whether punctuation should be ignored. Possible values are true and false; the default is false.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Numeric">
            <summary>
            Whether numeric collation should be used, such that "1" &lt; "2" &lt; "10". Possible values are true and false; the default is false. This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.CaseFirst">
            <summary>
            Whether upper case or lower case should sort first. Possible values are "upper", "lower", or "false" (use the locale's default); the default is "false". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="T:System.CaseFirst">
            <summary>
            Whether upper case or lower case should sort first. Possible values are "upper", "lower", or "false" (use the locale's default); the default is "false". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="T:System.Sensitivity">
            <summary>
            Which differences in the strings should lead to non-zero result values.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Base">
            <summary>
            Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Accent">
            <summary>
            Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Case">
            <summary>
            Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Variant">
            <summary>
            Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A.
            </summary>
        </member>
        <member name="T:System.Usage">
            <summary>
            Whether the comparison is for sorting or for searching for matching strings. Possible values are "sort" and "search"; the default is "sort".
            </summary>
        </member>
        <member name="T:System.LocaleMatcher">
            <summary>
            The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". For information about this option, see the Intl page.
            </summary>
        </member>
        <member name="F:System.LocaleMatcher.Lookup">
             <summary>
            
             </summary>
        </member>
        <member name="F:System.LocaleMatcher.BestFit">
             <summary>
            
             </summary>
        </member>
        <member name="P:System.Exception.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the exception.
            </summary>
        </member>
        <member name="P:System.Exception.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:System.Exception.InnerException">
            <summary>
            Gets the Exception instance that caused the current exception.
            </summary>
        </member>
        <member name="P:System.Exception.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
            <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
            <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
            <returns>One or several <see cref="T:System.AttributeTargets"/> values. The default is All.</returns>
        </member>
        <member name="T:System.String">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="M:System.String.#ctor">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="M:System.String.#ctor(System.Char,System.Int32)">
            <summary>
            Constructs a string from the value indicated by a specified character repeated a specified number of times.
            </summary>
            <param name="c">A character.</param>
            <param name="count">The number of times the character occurs.</param>
        </member>
        <member name="M:System.String.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an Empty string.
            </summary>
            <param name="value">The string to test. </param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or String.Empty, or if value consists exclusively of white-space characters. </returns>
        </member>
        <member name="M:System.String.FromCharCode">
            <summary>
            The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.
            </summary>
            <returns>String.Empty</returns>
        </member>
        <member name="M:System.String.FromCharCode(System.Int32[])">
            <summary>
            The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.
            </summary>
            <param name="numbers">A sequence of numbers that are Unicode values.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.CharAt(System.Int32)">
            <summary>
            The charAt() method returns the specified character from a string.
            </summary>
            <param name="index">An integer between 0 and 1-less-than the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.CharCodeAt(System.Int32)">
            <summary>
            The charCodeAt() method returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).
            </summary>
            <param name="index">An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether two specified String objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.StringComparison)">
            <summary>
            Determines whether this string and a specified String object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared. </param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Equals(System.String)">
            <summary>
            Determines whether this instance and another specified String object have the same value.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed IEnumerable collection of type String.
            </summary>
            <param name="values">A collection object that implements IEnumerable and whose generic type argument is String.</param>
            <returns>The concatenated strings in values, or String.Empty if values is an empty IEnumerable(Of String).</returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <param name="string3">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <param name="string3">Strings to concatenate to this string.</param>
            <param name="string4">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="strings">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object)">
            <summary>
            Creates the string representation of a specified object.
            </summary>
            <param name="arg0">The object to represent, or null.</param>
            <returns>The string representation of the value of arg0, or String.Empty if arg0 is null.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <param name="object3">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <param name="object3">Strings to concatenate to this string.</param>
            <param name="object4">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="objects">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a constructed generic IEnumerable collection.
            </summary>
            <param name="values">A collection object that implements generic IEnumerable.</param>
            <returns>The concatenated members in values.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary>
            The compare() method compares two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
            <summary>
            The compare() method compares two specified String objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            The compare() method compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The compare() method compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. The search starts at a specified character position and
            examines a specified number of character positions. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. The search starts at a specified character position and
            examines a specified number of character positions. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. A parameter specifies the type of search
             to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. Parameters specify the starting search
             position in the current string and the type of search to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="fromIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. Parameters specify the starting search
             position in the current string, the number of characters in the current string
             to search, and the type of search to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="fromIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <returns></returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String,System.String)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <param name="locales">A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:</param>
            <returns></returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String,System.String,System.LocaleOptions)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <param name="locales">A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:</param>
            <param name="options">An object with some or all of the following properties:</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Match(Bridge.Text.RegularExpressions.Regex)">
            <summary>
            The match() method retrieves the matches when matching a string against a regular expression.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Match(System.String)">
            <summary>
            The match() method retrieves the matches when matching a string against a regular expression.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(Bridge.Text.RegularExpressions.Regex,System.String)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="newSubStr">The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the "Specifying a string as a parameter" section below.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(Bridge.Text.RegularExpressions.Regex,System.Delegate)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(Bridge.Text.RegularExpressions.Regex,System.Func{System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(Bridge.Text.RegularExpressions.Regex,System.Func{System.String,System.Int32,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(Bridge.Text.RegularExpressions.Regex,System.Func{System.String,System.Int32,System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.String)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="newSubStr">The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the "Specifying a string as a parameter" section below.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Delegate)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.Int32,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.Int32,System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Search(Bridge.Text.RegularExpressions.Regex)">
            <summary>
            The search() method executes a search for a match between a regular expression and this String object.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Search(System.String)">
            <summary>
            The search() method executes a search for a match between a regular expression and this String object.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Slice(System.Int32)">
            <summary>
            The slice() method extracts a section of a string and returns a new string.
            </summary>
            <param name="beginSlice">The zero-based index at which to begin extraction. If negative, it is treated as (sourceLength-beginSlice) where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength-3).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Slice(System.Int32,System.Int32)">
            <summary>
            The slice() method extracts a section of a string and returns a new string.
            </summary>
            <param name="beginSlice">The zero-based index at which to begin extraction. If negative, it is treated as (sourceLength-beginSlice) where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength-3).</param>
            <param name="endSlice">The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string. If negative, it is treated as (sourceLength-endSlice) where sourceLength is the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.JsSubstring(System.Int32)">
            <summary>
            The substring() method returns a subset of a string between one index and another, or through the end of the string.
            </summary>
            <param name="indexA">An integer between 0 and the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.JsSubstring(System.Int32,System.Int32)">
            <summary>
            The substring() method returns a subset of a string between one index and another, or through the end of the string.
            </summary>
            <param name="indexA">An integer between 0 and the length of the string.</param>
            <param name="indexB">An integer between 0 and the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substr(System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substr(System.Int32,System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <param name="length">The number of characters to extract.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <param name="length">The number of characters to extract.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.ToLower">
            <summary>
            The toLower() method returns the calling string value converted to lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.String.ToUpper">
            <summary>
            The toUpper() method returns the calling string value converted to uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.String.Trim">
            <summary>
            The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).
            </summary>
            <returns>The trimmed string</returns>
        </member>
        <member name="M:System.String.Contains(System.String)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="value">The string to seek. </param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object[])">
             Summary:
                 Replaces the format item in a specified string with the string representation
                 of a corresponding object in a specified array.
            
             Parameters:
               format:
                 A composite format string.
            
               args:
                 An object array that contains zero or more objects to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representation
                 of the corresponding objects in args.
            
        </member>
        <member name="M:System.String.Format(System.String,System.Object)">
            
             Summary:
                 Replaces one or more format items in a specified string with the string representation
                 of a specified object.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The object to format.
            
             Returns:
                 A copy of format in which any format items are replaced by the string representation
                 of arg0.
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
            
             Summary:
                 Replaces the format items in a specified string with the string representations
                 of corresponding objects in a specified array. A parameter supplies culture-specific
                 formatting information.
            
             Parameters:
               provider:
                 An object that supplies culture-specific formatting information.
            
               format:
                 A composite format string.
            
               args:
                 An object array that contains zero or more objects to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representation
                 of the corresponding objects in args.
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object)">
            
             Summary:
                 Replaces the format items in a specified string with the string representation
                 of two specified objects.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The first object to format.
            
               arg1:
                 The second object to format.
            
             Returns:
                 A copy of format in which format items are replaced by the string representations
                 of arg0 and arg1.
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
            
             Summary:
                 Replaces the format items in a specified string with the string representation
                 of three specified objects.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The first object to format.
            
               arg1:
                 The second object to format.
            
               arg2:
                 The third object to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representations
                 of arg0, arg1, and arg2.
        </member>
    </members>
</doc>
